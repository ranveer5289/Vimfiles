" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

function! SplitColors()
    if winnr("$") > 1 
        if &ft == 'python'
            colo badwolf
        else
            colo molokai
        endif
    endif
endfunction

"Change colorscheme acc. to filetype when switching tabs.
function! ChangeColors()
    if &ft == 'python'
        colo badwolf
    else
        colo molokai
    endif
endfunction


"Prevent behaviour of <CR>
autocmd! BufReadPost quickfix nnoremap <buffer> <CR> <CR>

autocmd! BufEnter * call SplitColors()

"Call ChangeColors()
autocmd! TabEnter * call ChangeColors()

"Skeleton according to file-types
autocmd! BufNewFile *.sh silent! 0r /home/ranveer/.vim/skel/bashscript.%:e
autocmd! BufNewFile *.py silent! 0r /home/ranveer/.vim/skel/pythonscript.%:e
autocmd! BufNewFile *.java silent! 0r /home/ranveer/.vim/skel/javacode.%:e
autocmd! BufNewFile *.pl silent! 0r /home/ranveer/.vim/skel/perlscript.%:e


autocmd! BufEnter,BufNewFile *.py colo badwolf
autocmd! BufLeave *.py colo badwolf

autocmd! BufWrite,BufRead *.java,*.vala :normal gg=G

autocmd! BufRead *.vala,*.vapi set efm=%f:%l.%c-%[%^:]%#":\ %t%[%^:]%#":\ %m
autocmd! BufRead,BufNewFile *.vala,*.vapi setfiletype vala

"Enable python omnicomplete
"autocmd FileType python set omnifunc=pythoncomplete#Complete


"autocmd! FileType perl nnoremap <leader>; A;<esc>
"autocmd! FileType perl nnoremap <A-F5> :%! perltidy<cr>

let vala_comment_strings = 1
let g:SuperTabDefaultCompletionType = "context" "vim builtin/jed-vim autocomplete using supertab.
let g:is_bash = 1

"-----------------------------------ULTISNIPS SETTINGS---------------------------------------------

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<c-tab>"

"-----------------------------------JEDI-VIM SETTINGS-----------------------------------------------

"let g:jedi#auto_initialization = 0
let g:jedi#popup_on_dot = 0


"-----------------------------------PATHOGEN PLUGIN MANAGER-----------------------------------------

call pathogen#infect()
call pathogen#infect('/home/ranveer/.vim/bundle')
call pathogen#helptags()

"---------------------------------------------------------------------------------------------------

autocmd!FocusLost * :wa
colorscheme molokai
filetype plugin on


"----------------------------------VIM GLOBAL SETTINGS-----------------------------------------------


set nocompatible
set ttyfast
set nu
set encoding=utf-8
set autoindent shiftwidth=4
set t_Co=256
set smarttab
set backup
set expandtab
set smartindent
set autowrite		" Automatically save before commands like :next and :make
set tabstop=4
set showmatch		" Show matching brackets.
"set smartcase
set incsearch 
set hlsearch
set textwidth=90
set backupdir=/home/ranveer/VimTemp/backup
set undodir=/home/ranveer/VimTemp/undohist
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload
set laststatus=2
set modifiable
set completeopt-=preview "Remove Pydoc Preview
set completeopt=menuone,longest "Doesn't autocomplete with the first word
set complete-=i "Searching include can be slow. Specially with my perl setup.
set wildmenu  "Vim command-line completion
set wildmode=longest:full,full

"---------------VIM STATUSLINE----------------------------------------------------------------------


"Powerline configuration
let g:Powerline_symbols='fancy'
let g:Powerline_colorscheme='skwp'


"----------------VIM MAPPING----------------------------------------------------------------------------


"Prevent vim to send #comment to column 0 in python.
inoremap # X<BS>#

"Search highlighted cleared
nnoremap //  :nohlsearch<CR>

"Toggle Tagbar plugin
nnoremap <F8> :TagbarToggle<CR> 

"Mapping for Pydoc plugin
cnoremap py :Pydoc

"Create newline below the current line
nnoremap <CR> o<Esc>

"Replace test with filename for .java files
nnoremap <F2> :%s/test/\=expand('%:r')/g<CR>

"Use tab to move b/w split panes
nnoremap <tab><tab> <C-w>w

"Open a new buffer(quickfix_list) with copen to see occurrences of
"highlighted word.
nnoremap <silent> ,/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

"Template to replace highlighted text.
cnoremap re %s//

"Convert word to uppercase in insert mode.
inoremap <C-u> <Esc>g<S-u>wi

"Convert word to uppercase in normal mode.
nnoremap <C-u> g<S-u>w

"Edit vimrc
nnoremap ,e :vsplit $MYVIMRC<cr>

"Source vimrc
nnoremap ,s :source $MYVIMRC<cr>

"Fix typo while using :wq
cnoremap Wq wq

"Fix typo while using :q
cnoremap Q q

"Fix Typo while using :w
cnoremap W w

"check battery_status
nnoremap <F3> :call BatteryStatus()<cr>

"Edit file which requires sudo access"
cnoremap ws w !sudo tee %
